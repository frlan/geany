.. |(version)| replace:: 1.24

=======
 Geany
=======

---------------------------------------------------------
Eine schnelle, leichtgewichtige, Gtk-Entwicklungsumgebung
---------------------------------------------------------

:Autoren: Enrico Tröger,
          Nick Treleaven,
          Frank Lanitz,
          Colomban Wendling,
          Matthew Brush
:Datum: 2013-03-10
:Version: |(version)|

Copyright © 2005-2013

This document is distributed under the terms of the GNU General Public
License as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version. A copy of this
license can be found in the file COPYING included with the source code
of this program, and also in the chapter `GNU General Public License`_.

.. contents::



Einleitung
==========

Über Geany
----------

Geany ist eine schnelle und leichtgewichtige, integrierte
Entwicklungsumgebung (IDE). Es wurde mit dem Ziel entwickelt, dieses Ziel
durch wenige Abhängigkeiten zu anderen Paketen zu erfüllen. Zusätzlich wurde
darauf Wert gelegt, dass die Entwicklung möglichst unabhängig von großen
Desktopumgebungen wie KDE oder GNOME statt finden. So benötigt Geany nur die
GTK2-Bibliotheken, um ausgeführt werden zu können.

Einige grundlegende Funktionen von Geany sind dabei:

* Hervorhebung im Quelltext
* Ein- und Ausblenden von Teilen von Quelltext
* Autovervollständigung von Variablen, Funktionsnamen und anderen Wörtern
* Konfigurierbare Quelltext-Schnipsel zum einfachen Einfügen
* Automatisches Schließen von XML- und HTML-Tags
* Calltips
* Eine große Zahl von unterstützen Dateitypen wie C, Java, PHP, HTML,
  Python, Perl, Pascal und anderen
* Symbol-Liste
* Einfache Navigation durch den Quelltext
* Direktes aufrufe des Buildsystemes zum Übersetzen von Quelltext
* Eine einfache Projektverwaltung
* Schnittstelle für Erweiterungen

Bezugsquellen
-------------

Geany kann von http://www.geany.org herunter geladen werden. Oftmals kann
Geany auch über die Paketverwaltungen von (Linux-)Distributionen herunter
geladen werden. Eine Liste mit verfügbaren Paketen gibt es zum Beispiel
unter http://www.geany.org/Download/ThirdPartyPackages.

Lizenz
------

Geany is distributed under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version. A copy of this
license can be found in the file COPYING included with the source
code of this program and in the chapter, `GNU General Public License`_.

The included Scintilla library (found in the subdirectory
``scintilla/``) has its own license, which can be found in the chapter,
`License for Scintilla and SciTE`_.

Über dieses Dokument
--------------------

Diese Dokumentation ist in HTML und Klartext verfügbar. Die jeweils aktuelle
Version kann unter http://www.geany.org/ abgerufen werden.

Wenn du zu dieser Dokumentation beitragen möchtest, schau nach bei
`Contributing to this document`_.


Installation
============


Anforderungen
-------------

Um Geany zu installieren benötigt man GTK2 (>= 2.16.0), Pango, Glib sowie
ATK. Die meisten (Linux-)Distributionen sollten diese Pakete über ihre
Paketverwaltungen zur Verfügung stellen. In vielen Fällen sind diese sogar
bereits installiert. Alternativ kann man sie über http://www.gtk.org
herunter laden.

Der Windows-Installer bringt bereits alle benötigten Bibliotheken
zusammengefasst in einem Paket mit.


Binär-Pakete
------------

Es ist eine Reihe von binären Paketen von Geany verfügbar. Eine
Liste gibt es unter http://www.geany.org/Download/ThirdPartyPackages.


Geany aus den Quellen übersetzen
--------------------------------

Geany aus den Quellen zu übersetzen ist relativ einfach. Dafür benötigt man
die bereits erwähnten Bibliotheken (Gtk >= 2.16.0, Pango, Glib, ATK) sowie
deren Header-Dateien. Diese sind entweder über http://www.gtk.org oder über
die jeweilige Paketverwaltung verfügbar. Der zweitere Weg ist in der Regel
der einfachere.

Natürlich benötigt man noch einen C- und einen C++-Compiler. Die
Implementierungen des GNU-Projektes (gcc) wird dabei vom Geany-Team empfohlen.

Bauen von Geany mit den Autotools
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Geany kann mit den altbewährten Autotools übersetzt werden. Dieses ist gut
getestet und benötigt Make. Auch hier wird die Version GNU-Projektes -- GNU
Make -- empfohlen.

Um den Vorgang zu starten, muss zuerst ::

    $ ./configure
    $ make

ausgeführt werden. Danach dann als root ::

    % make install

Wird auf dem System sudo verwendet, sollte make mit sudo aufgerufen
werden::

    % sudo make install


Die Waf-basierte Übersetzung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Waf ist ein relativ junges Projekt, welches noch eine recht aktive
Entwicklung erfährt, aber dennoch schon in einem recht anwendbaren Zustand
ist. Im Vergleich zu den Autotools, ist Waf in Python geschrieben. Daher
sollte zuerst Python installiert werden. Danach kann man die Vorteile von
Waf gegenüber der Autotools genießen:

Der Übersetzungsprozess ist schneller. Insbesondere, wenn der
Zwischenspeicher zum Einsatz kommt, so dass bei Änderungen an einer Datei
nicht zwingend alle anderen ebenfalls neu übersetzt werden müssen, nur um
eine Änderung zu testen. Waf erinnert sich an die vorherigen Ergebnisse und
beschleunigt so den gesamten Übersetzungsprozess. Details dazu gibt es unter
`Waf Cache`_.

Um Geany nun mit Waf zu übersetzen, muss man wie folgt vorgehen:::

    $ ./waf configure
    $ ./waf build

Schließlich als root dann Geany installieren::

    % ./waf install

Bei der Nutzung von sudo natürlich dann::

    % sudo ./waf install


Waf Cache
`````````
Waf hat eine sehr nützliche Funktionalität, die
helfen kann, unnötige Übersetzungsvorgänge von unverändertem
Quelltext zu verhindern, wie es sehr oft bei der Entwicklung von
neuen Funktionen oder anderen kleinen Änderungen vorkommt. Waf ist
in der Lage, sich an bereits übersetzte Objekt-Dateien über einen
Zwischenspeicher zu erinnern und diese bei einem späteren Übersetzungsvorgang
wieder zu verwenden. Der dazu genutzte Cache kann über die Variable
``WAFCACHE`` konfiguriert werden.

Ein möglicher Pfad für den Cache könnte ``~/.cache/waf``. Um diesen
zu nutzen, sollte das Verzeichnis zuerst angelegt werden::

    $ mkdir -p ~/.cache/waf

Danach sollte die Umgebungsvariable gesetzt werden::

    export WAFCACHE=$HOME/.cache/waf

Mehr Informationen über den Funktionsumfang des Waf-Caches kann man auf den
Projektseiten unter http://code.google.com/p/waf/wiki/CacheObjectFiles finden.

Den Cache leeren
******************

Die Größe des Cache-Verzeichnis wächst mit der Zeit und kann bei häufiger
Verwendung relativ groß werden und sollte deshalb im Auge behalten werden --
Waf an sich, führt keine Aufräumarbeiten innerhalb dieses Verzeichnisses aus.

Um diese Aufgabe zu erledigen, kann man in regelmäßigen Abständen
den Befehl ausführen::

    $ find $HOME/.cache/waf -mtime +14 -exec rm {} \;

Wobei natürlich der Pfad sowie die Zeit ``mtime`` in Tagen angepasst werden
sollte. Das obere Beispiel löscht alle Einträge innerhalb von
``$HOME/.cache/waf``, die sich seit mindestens 14 Tagen nicht mehr geändert
haben. Details zu ``find`` gibt es in dessen Handbuchseiten.

Angepasste Installationen
^^^^^^^^^^^^^^^^^^^^^^^^^

Das ``configure``-Skript unterstützt verschiedene, übliche Optionen.
Eine detaillierte Liste gibt es über::

    $ ./configure --help

bzw. bei der Benutzung von ``waf`` über::

    $ ./waf --help

Ferner gibt es in der Datei ``INSTALL`` weitere Tipps für die
Installation. Interessant dazu ist auch der Punkt `Compile-time
options`_. aus dieser Anleitung.


Dynamisches Laden von Bibiotheken und die VTE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Wenn das Zielsystem das keine Unterstützung für das ``dynamic
linking`` bietet, kann mit der Option ``--disable-vte`` während des
``configure``-Laufs die Unterstützung dafür abgeschaltet werden. In
Folge dessen, wird Geany dann nicht nach ``libvte.so.4`` suchen und
versuchen, diese zu laden.

Probleme beim Übersetzen
^^^^^^^^^^^^^^^^^^^^^^^^

Sollte es bei der Übersetzung zu Problemen kommen, sollte zuerst die
entsprechende Umgebung überprüft werden. In vielen Fällen liegt die
Ursache in einer nicht sauberen oder nicht korrekt aufgesetzt
Übersetzungsumgebung. Sollte sich das Problem auch nach sorgsamer
Überprüfung nicht lösen lassen, steht eine Mailingliste für die
Kontaktaufnahme bzw. die Autoren direkt zur Verfügung. Ab und an
kommt es aber auch vor, dass die Proleme durch Besonderheiten der
verwendeten (Linux-)Distrubution ausgelöst werden. Ein Blick in die
entsprechende Dokumentation hilft also ab und an ebenfalls weiter.


Installationspfad
-----------------

Im Standard wird Geany unter unixoiden Systemen nach ``/usr/local``
installiert. Soll Geany in einen anderen Pfad installiert werden, kann
man diesen beim Übersetzungsvorgang übergeben.

Auf der anderen Seite stellt sich ab und an die Frage, wohin Geany
eigentlich installiert wurde. Zum Beispiel, wenn man Geany aus einem
Distributionspaket installiert hat. Um dies heraus zu finden, bietet
Geany die Kommandozielen-Option ``--print-prefix``, die als erstes
Ergebnis den Installations-Basis-Pfad von Geany anzeigt. Mehr
`Kommandozielenoptionen`_, gibt es im entsprechenden Abschnitt dieser
Dokumentation.

.. note::
    In den meisten Fällen wird es nicht notwendig sein, die
    eigentlichen System-Dateien von Geany anzupassen. Für jeden Nutzer
    könnnen Änderungen über das lokale Konfigurationsverzeichnis zur
    Verfügung gestellt werden. Siehe dazu auch`Configuration files`_.


Verwendung
==========

Der Start
---------

Geany kann auf verschiedene Wege gestartet werden:

* Über das Menü der verwendeten Desktop-Umgebung

  Innerhalb des Anwendungsmenü der Desktopumgebung befindet sich Geany
  in der Regel im Abschnitt »Entwicklung«

  Unter Windows-Betriebssystemen gibt es im Startmenü einen
  speziellen Geany-Ordner, über welches Geany gestartet werden kann.

* Von der Kommandozeile aus:

  Um Geany von der Kommandoziele aus zu starten, muss nur folgender
  Befehlt eingegeben und mit »Enter« quitiert werden:: Return::

      % geany

Das Geany-Fenster
-----------------

Nachdem Geany gestartet ist, sieht es ungefähr so aus:

.. image:: ./images/main_window.png

Der Arbeitsplatz besteht dabei aus verschiedenen Teilen:

* das Menü
* die optinale Werkzeugleiste
* die optionale Seitenleiste, welche verschiedene Reiter anzeigen kann:

  * Dokumente - eine Liste mit geöffneten Dokumenten sowie
  * Symbole - eine Liste mit im Quellcode verwendeten Symbolen

* das Haupt-Editor-Fenster
* sowie ein optinales Meldungsfenster, welches ebenfalls verschiedene
  Reiter anzeien kann.

  * Status - Eine Übersicht über alle Status-Meldungen
  * Compiler - Die Ausgabe von Kompilierungs- und Übersetzungsvorgängen
  * Meldungen - Ergebnisse von Such- und anderen Operationen
  * Notizen - Ein Notizblatt für unterschiedliche Notizen
  * Terminal - Ein optinales, eingebundenes Terminal

* die Status-Zeile

Die meisten dieser Elemente können über
Einstellungen->Schnittstellen konfiguriert werden. Dies betrifft
unter anderem auch die Position dieser. Um die Größe zu ändern,
können mit der Maus die entsprechenden Teiler verschoben werden.

Die Werkzeugleiste kann zudem direkt über ein Popup konfiguriert werden.

Zusätzlich zu den bereits vorhandenen Reitern der Seitenleiste oder
des Meldungsfenster können Plugins noch zusätzliche Reite hinzufügen.

Kommandozeilen-Optionen
-----------------------

============  =======================  =================================================
Short option  Long option              Function
============  =======================  =================================================
*keine*       +number                  Setzt die initiale Zeilennummer der ersten zu öffnenden Datei.
                                       (Analog zu --line). Zwischem dem + und der Zahl darf kein Leerzeichen
                                       stehen.
    								   Beispiel: geany +7 foo.bar öffnet die Datei foo.bar und platziert
    								   den Cursor in die Zeile 7.

*keine*       --column                 Bestimmt die initiale Spalte, in die der Cursor gesetzt wird.

-c dir_name   --config=directory_name  Use an alternate configuration directory. The default
                                       configuration directory is ``~/.config/geany/`` and that
                                       is where ``geany.conf`` and other configuration files
                                       reside.

*none*        --ft-names               Print a list of Geany's internal filetype names (useful
                                       for snippets configuration).

-g            --generate-tags          Generate a global tags file (see
                                       `Generating a global tags file`_).

-P            --no-preprocessing       Don't preprocess C/C++ files when generating tags.

-i            --new-instance           Do not open files in a running instance, force opening
                                       a new instance. Only available if Geany was compiled
                                       with support for Sockets.

-l            --line                   Set initial line number for the first opened file.

*none*        --list-documents         Return a list of open documents in a running Geany
                                       instance.
                                       This can be used to read the currently opened documents in
                                       Geany from an external script or tool. The returned list
                                       is separated by newlines (LF) and consists of the full,
                                       UTF-8 encoded filenames of the documents.
                                       Only available if Geany was compiled with support for
                                       Sockets.

-m            --no-msgwin              Do not show the message window. Use this option if you
                                       do not need compiler messages or VTE support.

-n            --no-ctags               Do not load symbol completion and call tip data. Use this
                                       option if you do not want to use them.

-p            --no-plugins             Do not load plugins or plugin support.

*none*        --print-prefix           Print installation prefix, the data directory, the lib
                                       directory and the locale directory (in that order) to
                                       stdout, one line each. This is mainly intended for plugin
                                       authors to detect installation paths.

-r            --read-only              Open all files given on the command line in read-only mode.
                                       This only applies to files opened explicitly from the command
                                       line, so files from previous sessions or project files are
                                       unaffected.

-s            --no-session             Do not load the previous session's files.

-t            --no-terminal            Do not load terminal support. Use this option if you do
                                       not want to load the virtual terminal emulator widget
                                       at startup. If you do not have ``libvte.so.4`` installed,
                                       then terminal-support is automatically disabled. Only
                                       available if Geany was compiled with support for VTE.

*none*        --socket-file            Use this socket filename for communication with a
                                       running Geany instance. This can be used with the following
                                       command to execute Geany on the current workspace::

                                         geany --socket-file=/tmp/geany-sock-$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')

*none*        --vte-lib                Specify explicitly the path including filename or only
                                       the filename to the VTE library, e.g.
                                       ``/usr/lib/libvte.so`` or ``libvte.so``. This option is
                                       only needed when the auto-detection does not work. Only
                                       available if Geany was compiled with support for VTE.

-v            --verbose                Be verbose (print useful status messages).

-V            --version                Show version information and exit.

-?            --help                   Show help information and exit.

*none*        [files ...]              Open all given files at startup. This option causes
                                       Geany to ignore loading stored files from the last
                                       session (if enabled).
                                       Geany also recognizes line and column information when
                                       appended to the filename with colons, e.g.
                                       "geany foo.bar:10:5" will open the file foo.bar and
                                       place the cursor in line 10 at column 5.

                                       Projects can also be opened but a project file (\*.geany)
                                       must be the first non-option argument. All additionally
                                       given files are ignored.
============  =======================  =================================================
