.. |(version)| replace:: 1.24

=======
 Geany
=======

---------------------------------------------------------
Eine schnelle, leichtgewichtige, Gtk-Entwicklungsumgebung
---------------------------------------------------------

:Autoren: Enrico Tröger,
          Nick Treleaven,
          Frank Lanitz,
          Colomban Wendling,
          Matthew Brush
:Datum: 2013-03-10
:Version: |(version)|

Copyright © 2005-2013

This document is distributed under the terms of the GNU General Public
License as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version. A copy of this
license can be found in the file COPYING included with the source code
of this program, and also in the chapter `GNU General Public License`_.

.. contents::



Einleitung
==========

Über Geany
----------

Geany ist eine schnelle und leichtgewichtige, integrierte
Entwicklungsumgebung (IDE). Es wurde mit dem Ziel entwickelt, dieses Ziel
durch wenige Abhängigkeiten zu anderen Paketen zu erfüllen. Zusätzlich wurde
darauf Wert gelegt, dass die Entwicklung möglichst unabhängig von großen
Desktopumgebungen wie KDE oder GNOME statt finden. So benötigt Geany nur die
GTK2-Bibliotheken, um ausgeführt werden zu können.

Einige grundlegende Funktionen von Geany sind dabei:

* Hervorhebung im Quelltext
* Ein- und Ausblenden von Teilen von Quelltext
* Autovervollständigung von Variablen, Funktionsnamen und anderen Wörtern
* Konfigurierbare Quelltext-Schnipsel zum einfachen Einfügen
* Automatisches Schließen von XML- und HTML-Tags
* Calltips
* Eine große Zahl von unterstützen Dateitypen wie C, Java, PHP, HTML,
  Python, Perl, Pascal und anderen
* Symbol-Liste
* Einfache Navigation durch den Quelltext
* Direktes aufrufe des Buildsystemes zum Übersetzen von Quelltext
* Eine einfache Projektverwaltung
* Schnittstelle für Erweiterungen

Bezugsquellen
-------------

Geany kann von http://www.geany.org herunter geladen werden. Oftmals kann
Geany auch über die Paketverwaltungen von (Linux-)Distributionen herunter
geladen werden. Eine Liste mit verfügbaren Paketen gibt es zum Beispiel
unter http://www.geany.org/Download/ThirdPartyPackages.

Lizenz
------

Geany is distributed under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version. A copy of this
license can be found in the file COPYING included with the source
code of this program and in the chapter, `GNU General Public License`_.

The included Scintilla library (found in the subdirectory
``scintilla/``) has its own license, which can be found in the chapter,
`License for Scintilla and SciTE`_.

Über dieses Dokument
--------------------

Diese Dokumentation ist in HTML und Klartext verfügbar. Die jeweils aktuelle
Version kann unter http://www.geany.org/ abgerufen werden.

Wenn du zu dieser Dokumentation beitragen möchtest, schau nach bei
`Contributing to this document`_.


Installation
============


Anforderungen
-------------

Um Geany zu installieren benötigt man GTK2 (>= 2.16.0), Pango, Glib sowie
ATK. Die meisten (Linux-)Distributionen sollten diese Pakete über ihre
Paketverwaltungen zur Verfügung stellen. In vielen Fällen sind diese sogar
bereits installiert. Alternativ kann man sie über http://www.gtk.org
herunter laden.

Der Windows-Installer bringt bereits alle benötigten Bibliotheken
zusammengefasst in einem Paket mit.


Binär-Pakete
------------

Es ist eine Reihe von binären Paketen von Geany verfügbar. Eine
Liste gibt es unter http://www.geany.org/Download/ThirdPartyPackages.


Geany aus den Quellen übersetzen
--------------------------------

Geany aus den Quellen zu übersetzen ist relativ einfach. Dafür benötigt man
die bereits erwähnten Bibliotheken (Gtk >= 2.16.0, Pango, Glib, ATK) sowie
deren Header-Dateien. Diese sind entweder über http://www.gtk.org oder über
die jeweilige Paketverwaltung verfügbar. Der zweitere Weg ist in der Regel
der einfachere.

Natürlich benötigt man noch einen C- und einen C++-Compiler. Die
Implementierungen des GNU-Projektes (gcc) wird dabei vom Geany-Team empfohlen.

Bauen von Geany mit den Autotools
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Geany kann mit den altbewährten Autotools übersetzt werden. Dieses ist gut
getestet und benötigt Make. Auch hier wird die Version GNU-Projektes -- GNU
Make -- empfohlen.

Um den Vorgang zu starten, muss zuerst ::

    $ ./configure
    $ make

ausgeführt werden. Danach dann als root ::

    % make install

Wird auf dem System sudo verwendet, sollte make mit sudo aufgerufen
werden::

    % sudo make install


Die Waf-basierte Übersetzung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Waf ist ein relativ junges Projekt, welches noch eine recht aktive
Entwicklung erfährt, aber dennoch schon in einem recht anwendbaren Zustand
ist. Im Vergleich zu den Autotools, ist Waf in Python geschrieben. Daher
sollte zuerst Python installiert werden. Danach kann man die Vorteile von
Waf gegenüber der Autotools genießen:

Der Übersetzungsprozess ist schneller. Insbesondere, wenn der
Zwischenspeicher zum Einsatz kommt, so dass bei Änderungen an einer Datei
nicht zwingend alle anderen ebenfalls neu übersetzt werden müssen, nur um
eine Änderung zu testen. Waf erinnert sich an die vorherigen Ergebnisse und
beschleunigt so den gesamten Übersetzungsprozess. Details dazu gibt es unter
`Waf Cache`_.

Um Geany nun mit Waf zu übersetzen, muss man wie folgt vorgehen:::

    $ ./waf configure
    $ ./waf build

Schließlich als root dann Geany installieren::

    % ./waf install

Bei der Nutzung von sudo natürlich dann::

    % sudo ./waf install


Waf Cache
`````````
Waf hat eine sehr nützliche Funktionalität, die
helfen kann, unnötige Übersetzungsvorgänge von unverändertem
Quelltext zu verhindern, wie es sehr oft bei der Entwicklung von
neuen Funktionen oder anderen kleinen Änderungen vorkommt. Waf ist
in der Lage, sich an bereits übersetzte Objekt-Dateien über einen
Zwischenspeicher zu erinnern und diese bei einem späteren Übersetzungsvorgang
wieder zu verwenden. Der dazu genutzte Cache kann über die Variable
``WAFCACHE`` konfiguriert werden.

Ein möglicher Pfad für den Cache könnte ``~/.cache/waf``. Um diesen
zu nutzen, sollte das Verzeichnis zuerst angelegt werden::

    $ mkdir -p ~/.cache/waf

Danach sollte die Umgebungsvariable gesetzt werden::

    export WAFCACHE=$HOME/.cache/waf

Mehr Informationen über den Funktionsumfang des Waf-Caches kann man auf den
Projektseiten unter http://code.google.com/p/waf/wiki/CacheObjectFiles finden.

Den Cache leeren
******************

Die Größe des Cache-Verzeichnis wächst mit der Zeit und kann bei häufiger
Verwendung relativ groß werden und sollte deshalb im Auge behalten werden --
Waf an sich, führt keine Aufräumarbeiten innerhalb dieses Verzeichnisses aus.

Um diese Aufgabe zu erledigen, kann man in regelmäßigen Abständen
den Befehl ausführen::

    $ find $HOME/.cache/waf -mtime +14 -exec rm {} \;

Wobei natürlich der Pfad sowie die Zeit ``mtime`` in Tagen angepasst werden
sollte. Das obere Beispiel löscht alle Einträge innerhalb von
``$HOME/.cache/waf``, die sich seit mindestens 14 Tagen nicht mehr geändert
haben. Details zu ``find`` gibt es in dessen Handbuchseiten.

Angepasste Installationen
^^^^^^^^^^^^^^^^^^^^^^^^^

Das ``configure``-Skript unterstützt verschiedene, übliche Optionen.
Eine detaillierte Liste gibt es über::

    $ ./configure --help

bzw. bei der Benutzung von ``waf`` über::

    $ ./waf --help

Ferner gibt es in der Datei ``INSTALL`` weitere Tipps für die
Installation. Interessant dazu ist auch der Punkt `Compile-time
options`_. aus dieser Anleitung.

